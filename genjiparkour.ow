variables
{
	global:
		3: DVA
		4: dva
		12: Dao
		13: SHIFT
		14: SUPERJUMP
		18: TQ
		19: TQ1
		20: TQ2
		21: TQ3
		22: EditMode
		23: TQ5
		24: TQ6
		25: kz_xs
		26: killballnumber
		27: pinballnumber
		28: deathjump
		30: save
		32: toplistPlayers
		33: toplistTimes
		34: toplistSortedTimes
		35: kaxiaotiao
		38: NANBA

	player:
		12: ztjs
		26: TY
		28: paqiang
		31: quick_restart
		32: climbNum
		84: CG
		85: CH
		117: HUB_DOTS_INDEX
}

subroutines
{
	3: KILLBALL
	4: pinball
}

rule("------------------------------------------------------Turn off the rules below after finishing editing--------------------------")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Disable Inspector Recording;
		Wait(10, Ignore Condition);
		Enable Inspector Recording;
		Loop;
	}
}

rule("Hide/Show Guide HUD")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
		Event Player == Host Player;
		Event Player.E >= 1;
	}

	actions
	{
		Wait(0.800, Abort When False);
		Play Effect(Host Player, Buff Impact Sound, Color(White), Event Player, 100);
		If(Event Player.K == 1);
			Event Player.K = 2;
			Small Message(All Players(All Teams), Custom String("Guide is hidden"));
		Else;
			Event Player.K = 1;
			Small Message(All Players(All Teams), Custom String("Guide is open"));
		End;
	}
}

rule("Clear excess data")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Button Held(Event Player, Button(Reload)) == True;
		Event Player == Host Player;
	}

	actions
	{
		Global.B = 0;
		Global.C = 0;
		Global.DVA = 0;
		Global.dva = 0;
		Global.F = 0;
		Global.G = 0;
		Global.J = 0;
		Global.K = 0;
		Global.L = 0;
		Global.Dao = 0;
		Global.SHIFT = 0;
		Global.SUPERJUMP = 0;
		Global.P = 0;
		Global.Q = 0;
		Global.R = 0;
		Global.TQ1 = 0;
		Global.NANBA = 0;
		Global.TQ2 = 0;
		Global.TQ3 = 0;
		Global.save = 0;
		Global.kz_xs = 0;
		Big Message(All Players(All Teams), Custom String("Excess data has been cleared"));
		Big Message(All Players(All Teams), Custom String("Excess data has been cleared"));
		Enable Inspector Recording;
	}
}

rule("Deflect TP")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Event Player.E == 1;
	}

	actions
	{
		Teleport(Event Player, Position Of(Event Player) + Facing Direction Of(Event Player) * 3);
	}
}

rule("Change editing mode")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Event Player == Host Player;
	}

	actions
	{
		Wait(1, Abort When False);
		If(Event Player.E == 1);
			Event Player.E = 2;
			Small Message(Host Player, Custom String("Current mode: Killing sphere"));
		Else If(Event Player.E == 2);
			Event Player.E = 3;
			Small Message(Host Player, Custom String("Current mode: Bouncing Ball"));
		Else If(Event Player.E == 3);
			Event Player.E = 1;
			Small Message(Host Player, Custom String("Current mode: Checkpoint"));
		End;
	}
}

rule("Change Killing Sphere size (increase)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Is Button Held(Event Player, Button(Jump)) == True;
		Event Player == Host Player;
		Event Player.E > 1;
	}

	actions
	{
		If(Event Player.E == 2);
			If(Count Of(Global.H) > 0);
				Global.I[Global.J] += 0.100;
				Wait(0.100, Ignore Condition);
				Loop If Condition Is True;
				For Global Variable(NANBA, 0, Count Of(Global.H), 1);
					Destroy Effect(Global.K[Global.NANBA]);
				End;
				Global.K = Empty Array;
				Call Subroutine(KILLBALL);
			End;
		Else If(Event Player.E == 3);
			If(Count Of(Global.TQ) > 0);
				Global.EditMode[Global.TQ1] += 0.100;
				Wait(0.100, Ignore Condition);
				Loop If Condition Is True;
			End;
		End;
	}
}

rule("Change Killing Sphere size (decrease)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Event Player == Host Player;
		Event Player.E > 1;
		Is Button Held(Event Player, Button(Interact)) == False;
	}

	actions
	{
		If(Count Of(Global.H) > 0);
			If(Event Player.E == 2);
				Global.I[Global.J] -= 0.100;
				Wait(0.100, Ignore Condition);
				Loop If Condition Is True;
				For Global Variable(NANBA, 0, Count Of(Global.H), 1);
					Destroy Effect(Global.K[Global.NANBA]);
				End;
				Global.K = Empty Array;
				Call Subroutine(KILLBALL);
			End;
		End;
	}
}

rule("Bouncing Ball strenght")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Event Player == Host Player;
		Event Player.E == 3;
		Is Button Held(Event Player, Button(Interact)) == False;
	}

	actions
	{
		If(Count Of(Global.TQ) > 0);
			Global.EditMode[Global.TQ1] -= 0.100;
			Wait(0.100, Ignore Condition);
			Loop If Condition Is True;
		End;
	}
}

rule("Move the Killing sphere (toward)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player == Host Player;
		Event Player.E > 1;
	}

	actions
	{
		If(Event Player.E == 2);
			Skip If(Global.L != Global.H[Global.J], 1);
			Chase Global Variable At Rate(L, Eye Position(Event Player) + Facing Direction Of(Event Player) * (Distance Between(Position Of(
				Event Player), Global.H[Global.J]) + 5), 1, Destination and Rate);
			Wait(0.250, Ignore Condition);
			Loop If Condition Is True;
			Stop Chasing Global Variable(L);
			Global.H[Global.J] = Global.L;
			For Global Variable(NANBA, 0, Count Of(Global.H), 1);
				Destroy Effect(Global.K[Global.NANBA]);
			End;
			Global.K = Empty Array;
			Call Subroutine(KILLBALL);
		Else If(Event Player.E == 3);
			Skip If(Global.TQ3 != Global.TQ[Global.TQ1], 1);
			Chase Global Variable At Rate(TQ3, Eye Position(Event Player) + Facing Direction Of(Event Player) * (Distance Between(Position Of(
				Event Player), Global.TQ[Global.TQ1]) + 5), 1, Destination and Rate);
			Wait(0.250, Ignore Condition);
			Loop If Condition Is True;
			Stop Chasing Global Variable(TQ3);
			Global.TQ[Global.TQ1] = Global.TQ3;
			For Global Variable(NANBA, 0, Count Of(Global.TQ), 1);
				Destroy Effect(Global.TQ2[Global.NANBA]);
			End;
			Global.TQ2 = Empty Array;
			Call Subroutine(pinball);
		End;
	}
}

rule("Move the Killing sphere (backward)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Event Player == Host Player;
		Event Player.E > 1;
	}

	actions
	{
		If(Event Player.E == 2);
			Skip If(Global.L != Global.H[Global.J], 1);
			Chase Global Variable At Rate(L, Eye Position(Event Player) - Facing Direction Of(Event Player) * (Distance Between(Position Of(
				Event Player), Global.H[Global.J]) + 5), 1, Destination and Rate);
			Wait(0.250, Ignore Condition);
			Loop If Condition Is True;
			Stop Chasing Global Variable(L);
			Global.H[Global.J] = Global.L;
			For Global Variable(NANBA, 0, Count Of(Global.H), 1);
				Destroy Effect(Global.K[Global.NANBA]);
			End;
			Global.K = Empty Array;
			Call Subroutine(KILLBALL);
		Else If(Event Player.E == 3);
			Skip If(Global.TQ3 != Global.TQ[Global.TQ1], 1);
			Chase Global Variable At Rate(TQ3, Eye Position(Event Player) - Facing Direction Of(Event Player) * (Distance Between(Position Of(
				Event Player), Global.TQ[Global.TQ1]) + 5), 1, Destination and Rate);
			Wait(0.250, Ignore Condition);
			Loop If Condition Is True;
			Stop Chasing Global Variable(TQ3);
			Global.TQ[Global.TQ1] = Global.TQ3;
			For Global Variable(NANBA, 0, Count Of(Global.TQ), 1);
				Destroy Effect(Global.TQ2[Global.NANBA]);
			End;
			Global.TQ2 = Empty Array;
			Call Subroutine(pinball);
		End;
	}
}

rule("Edit mode")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		"玩家E：编辑模式"
		Event Player.E = 1;
		Event Player.K = 1;
	}
}

rule("Create Checkpoint")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player == Host Player;
	}

	actions
	{
		If(Event Player.E == 1);
			Modify Global Variable(A, Append To Array, Position Of(Event Player) - Vector(0, 0, 0));
			Global.B = Count Of(Global.A) - 1;
			Small Message(All Players(All Teams), Custom String("New Checkpoint has been created"));
		Else If(Event Player.E == 2);
			If(Event Player.A == 0);
				Big Message(All Players(All Teams), Custom String("Cannot place killing sphere on level 0"));
			Else;
				Modify Global Variable(H, Append To Array, Position Of(Event Player));
				Modify Global Variable(killballnumber, Append To Array, Event Player.A);
				Global.J = Count Of(Global.H) - 1;
				Global.I[Global.J] = 5;
				For Global Variable(NANBA, 0, Count Of(Global.H), 1);
					Destroy Effect(Global.K[Global.NANBA]);
				End;
				Global.K = Empty Array;
				Call Subroutine(KILLBALL);
				Global.L = Global.H[Global.J];
				Big Message(All Players(All Teams), Custom String("New killing sphere has been created! \r\nIt's only valid for level {0}",
					Event Player.A));
			End;
		Else If(Event Player.E == 3);
			If(Event Player.A == 0);
				Big Message(All Players(All Teams), Custom String("Cannot place bouncing balls on level 0"));
			Else;
				Modify Global Variable(TQ, Append To Array, Position Of(Event Player));
				Global.TQ1 = Count Of(Global.TQ) - 1;
				Global.EditMode[Global.TQ1] = 10;
				Global.TQ5[Global.TQ1] = False;
				Global.TQ6[Global.TQ1] = False;
				For Global Variable(NANBA, 0, Count Of(Global.TQ), 1);
					Destroy Effect(Global.TQ2[Global.NANBA]);
				End;
				Global.TQ2 = Empty Array;
				Call Subroutine(pinball);
				Global.TQ3 = Global.TQ[Global.TQ1];
				Modify Global Variable(pinballnumber, Append To Array, Event Player.A);
				Big Message(All Players(All Teams), Custom String("New bouncing ball has been created! \r\nIt's only valid for level {0}",
					Event Player.A));
			End;
	}
}

rule("Delete Checkpoint")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Event Player == Host Player;
	}

	actions
	{
		If(Event Player.E == 1);
			Modify Global Variable(A, Remove From Array By Index, Global.B);
			Modify Global Variable(C, Remove From Array By Index, Global.B);
			Skip If(Global.B <= 0, 1);
			Global.B -= 1;
			Small Message(All Players(All Teams), Custom String("Checkpoint has been deleted"));
		Else If(Event Player.E == 2 && Count Of(Global.H) != 0);
			Modify Global Variable(H, Remove From Array By Index, Global.J);
			Modify Global Variable(I, Remove From Array By Index, Global.J);
			Modify Global Variable(killballnumber, Remove From Array By Index, Global.J);
			Destroy Effect(Global.K[Global.J]);
			Modify Global Variable(K, Remove From Array By Index, Global.J);
			Skip If(Global.J <= 0, 1);
			Global.J -= 1;
			Global.L = Global.H[Global.J];
		Else If(Event Player.E == 3 && Count Of(Global.TQ) != 0);
			Modify Global Variable(TQ, Remove From Array By Index, Global.TQ1);
			Modify Global Variable(EditMode, Remove From Array By Index, Global.TQ1);
			Modify Global Variable(TQ5, Remove From Array By Index, Global.TQ1);
			Modify Global Variable(TQ6, Remove From Array By Index, Global.TQ1);
			Destroy Effect(Global.TQ2[Global.TQ1]);
			Modify Global Variable(TQ2, Remove From Array By Index, Global.TQ1);
			Modify Global Variable(pinballnumber, Remove From Array By Index, Global.TQ1);
			Skip If(Global.TQ1 <= 0, 1);
			Global.TQ1 -= 1;
			Global.TQ3 = Global.TQ[Global.TQ1];
		End;
	}
}

rule("Move checkpoint")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player == Host Player;
	}

	actions
	{
		Small Message(All Players(All Teams), Count Of(Global.A[Global.B]) != 0 ? Custom String("Checkpoint {0} has been deleted",
			Global.B) : Custom String(""));
		Global.A[Global.B] = Position Of(Event Player) - Vector(0, 0, 0);
		Small Message(All Players(All Teams), Custom String("Checkpoint has been moved to your position"));
	}
}

rule("Add a teleport")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		(Is Button Held(Host Player, Button(Interact)) && Is Button Held(Host Player, Button(Reload))) == True;
		Count Of(Global.A) > 1;
		Host Player.E == 1;
		Global.B > 0;
		Is Button Held(Host Player, Button(Melee)) == False;
	}

	actions
	{
		Abort If(Is Button Held(Host Player, Button(Melee)) == True);
		Global.A[Global.B] = Array(Count Of(Global.A[Global.B]) != 0 ? Global.A[Global.B][0] : Global.A[Global.B], Position Of(
			Host Player));
		Small Message(All Players(All Teams), Custom String("Teleport has been added for level {0}", Global.B));
	}
}

rule("Swap selected point (back)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Event Player == Host Player;
	}

	actions
	{
		If(Event Player.E == 1);
			Skip If(Global.B <= 0, 1);
			Global.B -= 1;
		Else If(Event Player.E == 2);
			Skip If(Global.J <= 0, 2);
			Global.J -= 1;
			Global.L = Global.H[Global.J];
		Else If(Event Player.E == 3);
			Skip If(Global.TQ1 <= 0, 2);
			Global.TQ1 -= 1;
			Global.TQ3 = Global.TQ[Global.TQ1];
		End;
	}
}

rule("Swap selected point (forward)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Jump)) == True;
		Event Player == Host Player;
	}

	actions
	{
		If(Event Player.E == 1);
			Skip If(Global.B == Count Of(Global.A) - 1, 1);
			Global.B += 1;
		Else If(Event Player.E == 2);
			Skip If(Global.J == Count Of(Global.H) - 1, 2);
			Global.J += 1;
			Global.L = Global.H[Global.J];
		Else If(Event Player.E == 3);
			Skip If(Global.TQ1 == Count Of(Global.TQ) - 1, 2);
			Global.TQ1 += 1;
			Global.TQ3 = Global.TQ[Global.TQ1];
	}
}

rule("Bouncing Ball turn on/off ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Is Button Held(Event Player, Button(Ultimate)) && Is Button Held(Event Player, Button(Primary Fire))) == True;
		Event Player == Host Player;
		Event Player.E == 3;
		Count Of(Global.TQ) != 0;
	}

	actions
	{
		Wait(1, Ignore Condition);
		If(Global.TQ5[Global.TQ1] == False);
			Global.TQ5[Global.TQ1] = True;
		Else If(Global.TQ5[Global.TQ1] == True);
			Global.TQ5[Global.TQ1] = False;
		End;
	}
}

rule("Bouncing Ball turn on/off dash")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Is Button Held(Event Player, Button(Secondary Fire)) && Is Button Held(Event Player, Button(Ultimate))) == True;
		Event Player == Host Player;
		Event Player.E == 3;
		Count Of(Global.TQ) != 0;
	}

	actions
	{
		Wait(1, Ignore Condition);
		If(Global.TQ6[Global.TQ1] == False);
			Global.TQ6[Global.TQ1] = True;
		Else If(Global.TQ6[Global.TQ1] == True);
			Global.TQ6[Global.TQ1] = False;
		End;
	}
}

rule("Guide HUD")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("{{0}}", Host Player.K, Append To Array(Append To Array(
			Append To Array(Append To Array(Empty Array, 0), Custom String("{0}\r\n{1}\r\n{2}", Custom String(
			"Interact+LMB=Create New Checkpoint\r\nInteract+RMB=Delete selected Checkpoint\r\nInteract+R=Add teleport to Checkpoint"),
			Custom String("Interact+Ultimate=Set Checkpoint to your current position\r\nInteract+Crouch=Select previous Checkpoint"),
			Custom String("Interact+Jump=Select next Checkpoint\r\nInteract+1 ability=Show all checkpoints"))), Custom String(
			"{0}\r\n{1}\r\n{2}", Custom String(
			"Interact+LMB=Create new killing sphere\r\nInteract+RMB=Delete selected sphere\r\nInteract+Crouch=Select previous sphere"),
			Custom String("Interact+Jump=Select nex sphere\r\nDeflect+Jump=Make sphere bigger\r\nDeflect+Crouch=Shrink the sphere"),
			Custom String("Deflect+LMB=Move forward\r\nDeflect+RMB=Move Backward"))), Custom String("{0}\r\n{1}\r\n{2}", Custom String(
			"Interact+LMB=Create new Bouncing Ball\r\nInteract+RMB=Delete selected Ball\r\nInteract+Crouch=Select previous Ball"),
			Custom String(
			"Interact+Jump=Select next Ball\r\nDeflect+Jump=Increase Ball's strenght\r\nDeflect+Crouch=Decrease Ball's strenght"),
			Custom String("Deflect+LMB=Move Ball forward\r\nDeflect+RMB=Move Ball back")))[Host Player.E], Custom String(
			"Hold melee to open the guidance text")), Right, -2, Color(White), Color(White), Color(Yellow), Visible To and String,
			Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("{{0}}", Host Player.K, Custom String(
			"Crouch+LMB=Next lvl\r\nCrouch+RMB=Prev lvl\r\nIn invincbile mode:\r\nE=Trough Wall"), Custom String("")), Right, -1, Color(
			White), Color(White), Color(Green), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("{{0}}", Host Player.K, Custom String(
			"Hold melee to hide guidence text\r\nCreated by: 易忘#51876\r\nUdpated by: 五里雾中#51574\r\nTranslated by: Xerteks#2929,FATHER"),
			Custom String("")), Right, 0, Color(White), Color(White), Color(Red), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("{{0}}", Host Player.K, Custom String("{0}\r\n{1}{2}\r\n{3}",
			Custom String("To save the map:\r\n1.Interact+Melee+Reload to clear excess data"), Custom String(
			"2.Open Workshop Inspector - Set variable target as global - click the [x]\r\n3.Open Workshop Editor - open [Checkpoint | Position]"),
			Custom String("- CLICK THE YELLOW [+] SIGN\r\n4.TURN OFF EDIT RULES\r\n{0}{1}\r\n{2}", Custom String(
			"ESC→SHOW LOBBY→SETTINGS→SHARE CODE→CREATE NEW CODE→COPY CODE\r\n6.OPEN WORKSHOP EDITOR - PASTE MAP CODE AND ADD YOUR"),
			Custom String("NICKNAME AS AUTHOR IN \"TEXT\" \r\n7.ESC→SHOW LOBBY→SETTINGS→SHARE CODE→UPLOAD TO EXISTING CODE→\r\n{0}",
			Custom String(" PASTE THE CODE YOU CREATED IN STEP 5")), Custom String("\n"))), Custom String("")), Left, -12, Color(White),
			Color(White), Color(Yellow), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("{{0}}", Host Player.K, Append To Array(Append To Array(Append To Array(
			Append To Array(Empty Array, 0), Custom String("Hold Dash to change editing mode\r\nCurrent mode: Checkpoints")),
			Custom String("Hold Dash to change editing mode\r\nCurrent mode: Killing Sphere")), Custom String(
			"Hold Dash to change editing mode\r\nCurrent mode: Bouncing Ball"))[Host Player.E], Custom String(
			"Guide HUD has been closed")), Null, Append To Array(Append To Array(Append To Array(Append To Array(Empty Array,
			Custom String("")), Custom String("")), Custom String("")), Custom String(
			"Hold Q+LMB=Turn Ultimate On/Off\r\nHold Q+RMB=Turn Dash On/Off"))[Host Player.E], Left, -6, Color(Red), Color(White), Color(
			Orange), Visible To and String, Default Visibility);
	}
}

rule("Guide HUD effects")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Icon(All Players(All Teams), Global.A[Global.B] + Vector(0, 0.600, 0), Arrow: Down, Visible To and Position, Color(Red),
			True);
		Create In-World Text(All Players(All Teams), Custom String("Selected Checkpoint"), Global.A[Global.B] + Vector(0, 0.500, 0), 1.600,
			Do Not Clip, Visible To Position and String, Color(Red), Default Visibility);
		disabled Create Effect(All Players(All Teams), Sphere, Color(Red), Global.H[Global.J], Global.I[Global.J], Visible To Position and Radius);
		Create Effect(All Players(All Teams), Good Aura, Color(Purple), Global.TQ[Global.TQ1], 1, Visible To Position and Radius);
		"轻易别打开，动作太长会"
		Create HUD Text(All Players(All Teams), Append To Array(Append To Array(Append To Array(Append To Array(Empty Array, 0),
			Custom String("Selected Checkpoint's number: {0}", Global.B)), Custom String("Current Killing Sphere's radius: {0}",
			Global.I[Global.J])), Custom String("Current Bouncing Ball's strenght: {0}", Global.EditMode[Global.TQ1]))[Host Player.E],
			Null, Append To Array(Append To Array(Append To Array(Append To Array(Empty Array, Custom String("")), Custom String("")),
			Custom String("")), Custom String("Current Bouncing Ball's Ultimate: {0}\r\nCurrent Bouncing Ball's Dash: {1}",
			Global.TQ5[Global.TQ1], Global.TQ6[Global.TQ1]))[Host Player.E], Top, -14, Color(Red), Color(White), Color(Orange),
			Visible To and String, Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("Selected Killing Sphere"), Global.H[Global.J], 1.600, Do Not Clip,
			Visible To Position and String, Color(Sky Blue), Default Visibility);
		Create Effect(All Players(All Teams), Orb, Color(Red), Global.L, 1, Visible To Position and Radius);
		Create In-World Text(Host Player, String("{0} m", Distance Between(Host Player, Global.L)), Global.L - Vector(0, 1.500, 0), 1.500,
			Do Not Clip, Visible To Position and String, Color(Red), Default Visibility);
		Create Icon(All Players(All Teams), Global.H[Global.J] + Vector(0, 0.600, 0), Arrow: Down, Visible To and Position, Color(Red),
			True);
	}
}

rule("Hide excess checkpoints")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Event Player == Host Player;
	}

	actions
	{
		For Global Variable(B, Count Of(Global.C) - 1, 0, -1);
			Destroy Effect(Global.C[Global.B]);
			Modify Global Variable(C, Remove From Array By Index, Global.B);
		End;
		Global.B = -2;
	}
}

rule("Show checkpoints")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.B == -2;
	}

	actions
	{
		For Global Variable(B, 0, Count Of(Global.A), 1);
			Create Effect(All Players(All Teams), Ring, Color(Red), Global.A[Global.B], 1, Visible To);
			Modify Global Variable(C, Append To Array, Last Created Entity);
		End;
	}
}

rule("Jump to next checkpoint")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player.A < Count Of(Global.A) - 1;
	}

	actions
	{
		Event Player.A += 1;
		Teleport(Event Player, Global.A[Event Player.A]);
		Modify Global Variable At Index(P, Event Player.A, Append To Array, Event Player);
		Modify Global Variable At Index(P, Event Player.A - 1, Remove From Array By Value, Event Player);
	}
}

rule("Jump to previous checkpoint")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Event Player.A != 0;
	}

	actions
	{
		Teleport(Event Player, Global.A[Event Player.A - 1]);
		Event Player.A -= 1;
		Modify Global Variable At Index(P, Event Player.A, Append To Array, Event Player);
		Modify Global Variable At Index(P, Event Player.A + 1, Remove From Array By Value, Event Player);
	}
}

rule("------------------------------------------------------Turn off the rules above after finishing editing--------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Setup and Variables")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Disable Inspector Recording;
		Disable Built-In Game Mode Respawning(All Players(All Teams));
		Disable Built-In Game Mode Completion;
		Disable Built-In Game Mode Scoring;
		Disable Built-In Game Mode Music;
		Pause Match Time;
		Global.Dao = Empty Array;
		Global.SHIFT = Empty Array;
		Global.pinballnumber = Empty Array;
		Global.killballnumber = Empty Array;
		Global.A = Empty Array;
		Global.F = Empty Array;
		Global.G = Empty Array;
		Global.H = Empty Array;
		Global.I = Empty Array;
		Global.K = Empty Array;
		Global.J = 0;
		Global.Q = Empty Array;
		Global.TQ = Empty Array;
		Global.TQ2 = Empty Array;
		Global.EditMode = Empty Array;
		Global.TQ1 = 0;
		Global.TQ5 = Empty Array;
		Global.TQ6 = Empty Array;
		Wait(1, Ignore Condition);
		Global.B = Count Of(Global.A) - 1;
		Call Subroutine(KILLBALL);
		Wait(2, Ignore Condition);
		Call Subroutine(pinball);
		If(Current Game Mode == Game Mode(Skirmish));
			Create HUD Text(All Players(All Teams), Custom String(""), Null, String("{0} {1} {2}", Custom String(
				"Time left until server resets:"), 270 - Round To Integer(Total Time Elapsed / 60, Down), Custom String("Minutes")), Right,
				-15, Color(White), Color(White), Color(Red), Visible To and String, Default Visibility);
		Else;
			Create HUD Text(All Players(All Teams), Custom String(""), Null, String("{0} {1} {2}", Custom String(
				"Time left until server resets:"), 90 - Round To Integer(Total Time Elapsed / 60, Down), Custom String("Minutes")), Right, -15,
				Color(White), Color(White), Color(Red), Visible To and String, Default Visibility);
		End;
		Global.save = Empty Array;
		"Top 5 best times hud text"
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Top 5 "), Right, -8, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		"1th Place"
		Create HUD Text(Global.toplistSortedTimes[1] != Null ? All Players(All Teams) : Null, Hero Icon String(Hero(Genji)),
			Global.toplistPlayers[Index Of Array Value(Global.toplistTimes, Global.toplistSortedTimes[1])], Custom String("{0} sec",
			Global.toplistSortedTimes[1]), Right, -7, Custom Color(158, 255, 187, 255), Custom Color(158, 255, 187, 255), Custom Color(158,
			255, 187, 255), Visible To and String, Default Visibility);
		"2nd Place"
		Create HUD Text(Global.toplistSortedTimes[2] != Null ? All Players(All Teams) : Null, Hero Icon String(Hero(Genji)),
			Global.toplistPlayers[Index Of Array Value(Global.toplistTimes, Global.toplistSortedTimes[2])], Custom String("{0} sec",
			Global.toplistSortedTimes[2]), Right, -6, Custom Color(158, 255, 187, 255), Custom Color(158, 255, 187, 255), Custom Color(158,
			255, 187, 255), Visible To and String, Default Visibility);
		"3rd Place"
		Create HUD Text(Global.toplistSortedTimes[3] != Null ? All Players(All Teams) : Null, Hero Icon String(Hero(Genji)),
			Global.toplistPlayers[Index Of Array Value(Global.toplistTimes, Global.toplistSortedTimes[3])], Custom String("{0} sec",
			Global.toplistSortedTimes[3]), Right, -5, Custom Color(158, 255, 187, 255), Custom Color(158, 255, 187, 255), Custom Color(158,
			255, 187, 255), Visible To and String, Default Visibility);
		"4th Place"
		Create HUD Text(Global.toplistSortedTimes[4] != Null ? All Players(All Teams) : Null, Hero Icon String(Hero(Genji)),
			Global.toplistPlayers[Index Of Array Value(Global.toplistTimes, Global.toplistSortedTimes[4])], Custom String("{0} sec",
			Global.toplistSortedTimes[4]), Right, -4, Custom Color(158, 255, 187, 255), Custom Color(158, 255, 187, 255), Custom Color(158,
			255, 187, 255), Visible To and String, Default Visibility);
		"5th Place"
		Create HUD Text(Global.toplistSortedTimes[5] != Null ? All Players(All Teams) : Null, Hero Icon String(Hero(Genji)),
			Global.toplistPlayers[Index Of Array Value(Global.toplistTimes, Global.toplistSortedTimes[5])], Custom String("{0} sec",
			Global.toplistSortedTimes[5]), Right, -3, Custom Color(158, 255, 187, 255), Custom Color(158, 255, 187, 255), Custom Color(158,
			255, 187, 255), Visible To and String, Default Visibility);
		"Other player best times hud text"
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Other"), Right, -2, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String(
			"                                                   \r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"),
			Top, -6, Color(White), Color(White), Color(Orange), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0}+{1} | Invincible", Input Binding String(Button(Reload)),
			Input Binding String(Button(Melee))), Right, -12, Color(White), Color(White), Color(Purple), Visible To and String,
			Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0}+{1}+{2} | Restart", Input Binding String(Button(Crouch)),
			Input Binding String(Button(Ability 2)), Input Binding String(Button(Interact))), Right, -11, Color(White), Color(White),
			Color(Aqua), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Hold {0} | Spectate", Input Binding String(Button(Interact))),
			Right, -11, Color(White), Color(White), Color(Sky Blue), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Hold {0} |  Enable Quick reset", Input Binding String(Button(
			Reload))), Right, -10, Color(White), Color(White), Color(Yellow), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("press {0} | Quick reset", Input Binding String(Button(Reload))),
			Right, -9, Color(White), Color(White), Color(Orange), Visible To and String, Default Visibility);
		Global.kz_xs = Workshop Setting Toggle(Custom String("Extended function"), Custom String("Level time limit"), False, 0);
	}
}

rule("Checkpoint | Effect |-------------------------------------------------SUB0")
{
	event
	{
		Subroutine;
		Sub0;
	}

	actions
	{
		Create Effect(Event Player, Ring, Color(Sky Blue), Count Of(Global.A[Event Player.A])
			!= 0 ? Global.A[Event Player.A][1] : Global.A[Event Player.A], 1, Visible To Position and Radius);
		Event Player.B[0] = Last Created Entity;
		Create Effect(Event Player, Ring, Color(Lime Green), Global.A[Event Player.A + 1], 1, Visible To Position and Radius);
		Event Player.B[1] = Last Created Entity;
		Create Effect(Event Player, Light Shaft, Color(White), Global.A[Event Player.A + 1], 1, Visible To Position and Radius);
		Event Player.B[2] = Last Created Entity;
		Create Icon(Event Player, Global.A[Event Player.A + 1] + Vector(0, 1, 0), Arrow: Down, Visible To and Position, Color(Sky Blue),
			True);
		Event Player.B[3] = Last Created Entity;
		Create In-World Text(Event Player, Custom String("Come here", Global.kz_xs ? Custom String("in {0}s ", 5 - Event Player.L)
			: Custom String("")), Global.A[Event Player.A + 1], 1.500, Do Not Clip, Visible To Position and String, Color(White),
			Default Visibility);
		Event Player.B[4] = Last Text ID;
	}
}

rule("Checkpoint | Start the game |-------------------------------------SUB1")
{
	event
	{
		Subroutine;
		Sub1;
	}

	actions
	{
		If(Count Of(Global.A) != 0);
			If((Array Contains(Global.save, Custom String("{0}", Event Player)) && Global.kz_xs == False) == True);
				disabled If(Array Contains(Global.save, Custom String("{0}", Event Player)) == True);
				Event Player.A = Global.save[Index Of Array Value(Global.save, Custom String("{0}", Event Player)) + 1];
				Event Player.D = Global.save[Index Of Array Value(Global.save, Custom String("{0}", Event Player)) + 2];
				Global.save[Index Of Array Value(Global.save, Custom String("{0}", Event Player)) + 3] = Event Player;
				Global.save[Index Of Array Value(Global.save, Custom String("{0}", Event Player)) + 4] = Total Time Elapsed;
				Global.save[Index Of Array Value(Global.save, Custom String("{0}", Event Player)) + 5] = 0;
				Global.save[Index Of Array Value(Global.save, Custom String("{0}", Event Player)) + 6] = 0;
				Teleport(Event Player, Global.A[Global.save[Index Of Array Value(Global.save, Custom String("{0}", Event Player)) + 1]] + Vector(0,
					1, 0));
			Else;
				Teleport(Event Player, Global.A[0] + Vector(0, 1, 0));
				Event Player.A = 0;
				Event Player.D = 0;
				Stop Chasing Player Variable(Event Player, ztjs);
				Event Player.ztjs = 0;
				Modify Global Variable(save, Append To Array, Array(Custom String("{0}", Event Player), Event Player.A, Event Player.D,
					Event Player, Total Time Elapsed, 0, 0));
			End;
		End;
		Chase Player Variable At Rate(Event Player, D, Absolute Value(9999999.000), 1, Destination and Rate);
		Event Player.G = 0;
		Event Player.H = Empty Array;
		If(Event Player.E < 1);
			Set Ability 1 Enabled(Event Player, False);
			Set Ultimate Ability Enabled(Event Player, False);
		Else;
			Set Ability 1 Enabled(Event Player, True);
			Set Ultimate Ability Enabled(Event Player, True);
			Set Ultimate Charge(Event Player, 100);
		End;
		Set Status(Event Player, Null, Phased Out, 9999);
		Set Status(Event Player, Null, Invincible, 9999);
		Modify Global Variable At Index(P, Event Player.A, Append To Array, Event Player);
		Event Player.C = 0;
	}
}

rule("Checkpoint | Killing Sphere effect |-------------------------------------SUB")
{
	event
	{
		Subroutine;
		KILLBALL;
	}

	actions
	{
		Abort If(Global.H == Empty Array);
		Global.NANBA = 0;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[0]], Current Array Element), Sphere, Color(Blue), Global.H[Global.NANBA],
			Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 1;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[1]], Current Array Element), Sphere, Color(Blue), Global.H[Global.NANBA],
			Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 2;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[2]], Current Array Element), Sphere, Color(Blue), Global.H[Global.NANBA],
			Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 3;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[3]], Current Array Element), Sphere, Color(Blue), Global.H[Global.NANBA],
			Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 4;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[4]], Current Array Element), Sphere, Color(Blue), Global.H[Global.NANBA],
			Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 5;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[5]], Current Array Element), Sphere, Color(Blue), Global.H[Global.NANBA],
			Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 6;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[6]], Current Array Element), Sphere, Color(Blue), Global.H[Global.NANBA],
			Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 7;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[7]], Current Array Element), Sphere, Color(Blue), Global.H[Global.NANBA],
			Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 8;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[8]], Current Array Element), Sphere, Color(Blue), Global.H[Global.NANBA],
			Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 9;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[9]], Current Array Element), Sphere, Color(Blue), Global.H[Global.NANBA],
			Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 10;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[10]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 11;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[11]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 12;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[12]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 13;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[13]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 14;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[14]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 15;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[15]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 16;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[16]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 17;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[17]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 18;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[18]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 19;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[19]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 20;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[20]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 21;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[21]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 22;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[22]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 23;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[23]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 24;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[24]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 25;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[25]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 26;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[26]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 27;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[27]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 28;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[28]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 29;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[29]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 30;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[30]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 31;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[31]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 32;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[32]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 33;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[33]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 34;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[34]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 35;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[35]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 36;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[36]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 37;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[37]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 38;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[38]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 39;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[39]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 40;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[40]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 41;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[41]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 42;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[42]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 43;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[43]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 44;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[44]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 45;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[45]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 46;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[46]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 47;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[47]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 48;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[48]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 49;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[49]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
		Global.NANBA = 50;
		Create Effect(Sorted Array(Global.P[Global.killballnumber[50]], Current Array Element), Sphere, Color(Blue),
			Global.H[Global.NANBA], Global.I[Global.NANBA], Visible To);
		Modify Global Variable(K, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.H) - 1);
	}
}

rule("Checkpoint | Bouncing Ball effect |-------------------------------------SUB")
{
	event
	{
		Subroutine;
		pinball;
	}

	actions
	{
		Abort If(Global.TQ == Empty Array);
		Global.NANBA = 0;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[0]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 1;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[1]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 2;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[2]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 3;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[3]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 4;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[4]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 5;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[5]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 6;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[6]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 7;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[7]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 8;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[8]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 9;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[9]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 10;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[10]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 11;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[11]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 12;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[12]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 13;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[13]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 14;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[14]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 15;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[15]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 16;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[16]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 17;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[17]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 18;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[18]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 19;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[19]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 20;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[20]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 21;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[21]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 22;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[22]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 23;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[23]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 24;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[24]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 25;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[25]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 26;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[26]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 27;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[27]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 28;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[28]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 29;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[29]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 30;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[30]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 31;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[31]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 32;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[32]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 33;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[33]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 34;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[34]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 35;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[35]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 36;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[36]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 37;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[37]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 38;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[38]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 39;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[39]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 40;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[40]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 41;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[41]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 42;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[42]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 43;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[43]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 44;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[44]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 45;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[45]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 46;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[46]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 47;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[47]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 48;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[48]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 49;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[49]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 50;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[50]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 51;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[51]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 52;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[52]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 53;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[53]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 54;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[54]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 55;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[55]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 56;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[56]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 57;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[57]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 58;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[58]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 59;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[59]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 60;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[60]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 61;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[61]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 62;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[62]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 63;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[63]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 64;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[64]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 65;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[65]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 66;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[66]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 67;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[67]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 68;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[68]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 69;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[69]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 70;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[70]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 71;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[71]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 72;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[72]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 73;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[73]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 74;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[74]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
		Global.NANBA = 75;
		Create Effect(Sorted Array(Global.P[Global.pinballnumber[75]], Current Array Element), Orb, Color(Green), Global.TQ[Global.NANBA],
			1, Visible To);
		Modify Global Variable(TQ2, Append To Array, Last Created Entity);
		Abort If(Global.NANBA == Count Of(Global.TQ) - 1);
	}
}

rule("Checkpoint | Position <---------------------------------------------------------------------------- paste here!")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Checkpoint | HUD")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 0);
		If(Array Contains(Global.Q, Event Player) == False);
			Create HUD Text(Event Player, Null, Null, String("{0} {1}", Custom String("level "), String("{0} / {1}", Event Player.A, Count Of(
				Global.A) - 1)), Top, -13, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
			Create HUD Text(Event Player, Null, Null, String("{0} {1} {2}", Custom String("Time"), String("{0} sec", Event Player.D),
				Global.kz_xs ? Custom String("| time limit: {0}", Event Player.L) : Custom String("")), Left, -2, Color(White), Color(White),
				Color(White), Visible To and String, Default Visibility);
		End;
		Modify Global Variable(Q, Append To Array, Event Player);
		"子程序1为游戏的初始化设置"
		Call Subroutine(Sub1);
		Enable Death Spectate All Players(Event Player);
		Enable Death Spectate Target HUD(Event Player);
		"玩家F：自杀防止复活"
		Event Player.F = 0;
		"玩家I：教程HUD"
		Event Player.I = 2;
		"玩家J：爬墙提示HUD"
		Event Player.J = 2;
		"子程序0为检查点效果显示"
		Call Subroutine(Sub0);
		End;
	}
}

rule("Checkpoint | Arrived")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.A[Event Player.A + 1]) <= 1.400;
		Event Player.A < Count Of(Global.A) - 1;
		Is On Ground(Event Player) == True;
		(Event Player.E >= 1 || Event Player.C == 0) == True;
	}

	actions
	{
		Event Player.A += 1;
		If(Global.kz_xs);
			Small Message(Event Player, Custom String("Arrived at {0}/{1}", Event Player.A, Count Of(Global.A) - 1));
		Else;
			Modify Global Variable(save, Remove From Array By Index, Index Of Array Value(Global.save, Custom String("{0}", Event Player))
				+ 1);
			Modify Global Variable(save, Remove From Array By Index, Index Of Array Value(Global.save, Custom String("{0}", Event Player))
				+ 1);
			Modify Global Variable(save, Remove From Array By Index, Index Of Array Value(Global.save, Custom String("{0}", Event Player))
				+ 1);
			Modify Global Variable(save, Remove From Array By Index, Index Of Array Value(Global.save, Custom String("{0}", Event Player))
				+ 1);
			Modify Global Variable(save, Remove From Array By Index, Index Of Array Value(Global.save, Custom String("{0}", Event Player))
				+ 1);
			Modify Global Variable(save, Remove From Array By Index, Index Of Array Value(Global.save, Custom String("{0}", Event Player))
				+ 1);
			Modify Global Variable(save, Remove From Array By Value, Custom String("{0}", Event Player));
			Modify Global Variable(save, Append To Array, Array(Custom String("{0}", Event Player), Event Player.A, Event Player.D,
				Event Player, Total Time Elapsed, 0, 0));
			Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 100);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Sky Blue), Global.A[Event Player.A] + Vector(0, 1.500, 0), 4);
			Big Message(Event Player, String("{0} {1}", Custom String("Arrived at"), String("{0} / {1}", Event Player.A, Count Of(Global.A)
				- 1)));
		End;
		Modify Global Variable At Index(P, Event Player.A, Append To Array, Event Player);
		Modify Global Variable At Index(P, Event Player.A - 1, Remove From Array By Value, Event Player);
		If(Event Player.E < 1);
			Set Ultimate Ability Enabled(Event Player, False);
			Set Ability 1 Enabled(Event Player, False);
		End;
		Abort If(Event Player.E >= 1);
		If(Event Player.A >= Count Of(Global.A) - 1);
			Set Ability 1 Enabled(Event Player, True);
			Set Ultimate Ability Enabled(Event Player, True);
			Set Ultimate Charge(Event Player, 100);
			Stop Chasing Player Variable(Event Player, D);
			Big Message(All Players(All Teams), String("{0} {1} {2}", Event Player, Custom String("Mission complete! Time"), String("{0} sec",
				Event Player.D)));
			Destroy Effect(Event Player.B[0]);
			Destroy Effect(Event Player.B[1]);
			Destroy Effect(Event Player.B[2]);
			Destroy Icon(Event Player.B[3]);
			Destroy In-World Text(Event Player.B[4]);
			"F传送门开关"
			Modify Global Variable(F, Append To Array, Event Player);
			"G传送门开关"
			Modify Global Variable(G, Append To Array, Event Player);
			"H传送门字符串"
			Event Player.H = 2;
		End;
		If(Global.kz_xs == True);
			Event Player.L = 0;
			Chase Player Variable At Rate(Event Player, L, 10, 1, Destination and Rate);
		End;
	}
}

rule("nope")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Disable Game Mode HUD(All Players(All Teams));
	}
}

rule("Killing Sphere | Damage")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		(Global.killballnumber[Index Of Array Value(Global.H, Filtered Array(Global.H, Distance Between(Event Player,
			Current Array Element) <= Global.I[Index Of Array Value(Global.H, Current Array Element)])[0])
			] == Event Player.A || Global.killballnumber[Index Of Array Value(Global.H, Filtered Array(Global.H, Distance Between(
			Event Player, Current Array Element) <= Global.I[Index Of Array Value(Global.H, Current Array Element)])[1])
			] == Event Player.A || Global.killballnumber[Index Of Array Value(Global.H, Filtered Array(Global.H, Distance Between(
			Event Player, Current Array Element) <= Global.I[Index Of Array Value(Global.H, Current Array Element)])[2])
			] == Event Player.A || Global.killballnumber[Index Of Array Value(Global.H, Filtered Array(Global.H, Distance Between(
			Event Player, Current Array Element) <= Global.I[Index Of Array Value(Global.H, Current Array Element)])[3])
			] == Event Player.A) == True;
		Event Player.A != 0;
		Event Player.A < Count Of(Global.A) - 1;
		Event Player.C == 0;
	}

	actions
	{
		Kill(Event Player, Null);
	}
}

rule("Bouncing Ball | Properties")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		(Global.pinballnumber[Index Of Array Value(Global.TQ, Filtered Array(Global.TQ, Distance Between(Event Player,
			Current Array Element) <= 1.200))] == Event Player.A) == True;
		Event Player.A != 0;
	}

	actions
	{
		Apply Impulse(Event Player, Up, Global.EditMode[Index Of Array Value(Global.TQ, Filtered Array(Global.TQ, Distance Between(
			Position Of(Event Player), Current Array Element) <= 2))], To World, Cancel Contrary Motion);
		disabled Set Ability 1 Enabled(Event Player, Global.TQ6[Index Of Array Value(Global.TQ, Filtered Array(Global.TQ, Distance Between(
			Position Of(Event Player), Current Array Element) <= 2))]);
		disabled Set Ultimate Ability Enabled(Event Player, Global.TQ5[Index Of Array Value(Global.TQ, Filtered Array(Global.TQ, Distance Between(
			Position Of(Event Player), Current Array Element) <= 2))]);
		If(Global.TQ6[Index Of Array Value(Global.TQ, Filtered Array(Global.TQ, Distance Between(Position Of(Event Player),
			Current Array Element) <= 2))] == True);
			Set Ability 1 Enabled(Event Player, True);
			Small Message(Event Player, Custom String("Dash is ready"));
		End;
		If(Global.TQ5[Index Of Array Value(Global.TQ, Filtered Array(Global.TQ, Distance Between(Position Of(Event Player),
			Current Array Element) <= 2))] == True);
			Set Ultimate Ability Enabled(Event Player, True);
			Set Ultimate Charge(Event Player, 100);
			Small Message(Event Player, Custom String("Ultimate is ready"));
		End;
	}
}

rule("Data for Top 5")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Event Player.A == Count Of(Global.A) - 1;
		Event Player.E < 1;
	}

	actions
	{
		Modify Global Variable(save, Remove From Array By Index, Index Of Array Value(Global.save, Custom String("{0}", Event Player))
			+ 1);
		Modify Global Variable(save, Remove From Array By Index, Index Of Array Value(Global.save, Custom String("{0}", Event Player))
			+ 1);
		Modify Global Variable(save, Remove From Array By Index, Index Of Array Value(Global.save, Custom String("{0}", Event Player))
			+ 1);
		Modify Global Variable(save, Remove From Array By Index, Index Of Array Value(Global.save, Custom String("{0}", Event Player))
			+ 1);
		Modify Global Variable(save, Remove From Array By Index, Index Of Array Value(Global.save, Custom String("{0}", Event Player))
			+ 1);
		Modify Global Variable(save, Remove From Array By Index, Index Of Array Value(Global.save, Custom String("{0}", Event Player))
			+ 1);
		Modify Global Variable(save, Remove From Array By Value, Custom String("{0}", Event Player));
		If(Event Player.B[7] == Null);
			Event Player.T = Event Player.D;
			Create HUD Text(Array Contains(Global.toplistSortedTimes, Global.toplistTimes[Index Of Array Value(Global.toplistPlayers,
				Custom String("{0}", Event Player))]) == True ? Null : All Players(All Teams), Hero Icon String(Hero(Genji)), Event Player,
				Custom String("{0} sec", Event Player.T), Right, Event Player.T, Custom Color(158, 255, 187, 255), Custom Color(158, 255, 187,
				255), Custom Color(158, 255, 187, 255), Visible To Sort Order and String, Default Visibility);
			Event Player.B[7] = Last Text ID;
		Else;
			Skip If(Event Player.D > Event Player.T, 1);
			Event Player.T = Event Player.D;
		End;
		"Save data for the Top 5 list"
		If(Array Contains(Global.toplistPlayers, Custom String("{0}", Event Player)) == True);
			Skip If(Event Player.D >= Global.toplistTimes[Index Of Array Value(Global.toplistPlayers, Custom String("{0}", Event Player))], 1);
			Global.toplistTimes[Index Of Array Value(Global.toplistPlayers, Custom String("{0}", Event Player))] = Event Player.D;
		Else;
			Modify Global Variable(toplistPlayers, Append To Array, Custom String("{0}", Event Player));
			Global.toplistTimes[Index Of Array Value(Global.toplistPlayers, Custom String("{0}", Event Player))] = Event Player.D;
		End;
		"Reload the Sorted Array Times"
		Global.toplistSortedTimes = Array Slice(Sorted Array(Global.toplistTimes, Current Array Element), 0, 6);
		Stop Chasing Player Variable(Event Player, ztjs);
		Event Player.ztjs = 0;
	}
}

rule("Checkpoint | Finish effects")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.A == Count Of(Global.A) - 1;
		Event Player.E < 1;
		Is Moving(Event Player) == True;
		disabled (Is Moving(Event Player) == True || Is Button Held(Event Player, Button(Jump)) == True) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Position Of(Event Player), 1.600);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Green), Position Of(Event Player), 1.400);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Position Of(Event Player), 1.200);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Position Of(Event Player), 1);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Blue), Position Of(Event Player), 0.800);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Aqua), Position Of(Event Player), 0.600);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Position Of(Event Player), 0.400);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Sky Blue), Position Of(Event Player), 0.200);
		Wait(0.350, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Death Teleport")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Event Player.F != 1;
		Count Of(Global.A) >= 2;
	}

	actions
	{
		Clear Status(Event Player, Phased Out);
		Resurrect(Event Player);
		If(Global.kz_xs == True);
			Event Player.L = 0;
			Stop Chasing Player Variable(Event Player, L);
			Event Player.A = Event Player.E > 0 ? Event Player.A : 0;
		End;
		Teleport(Event Player, Count Of(Global.A[Event Player.A]) != 0 ? Global.A[Event Player.A][1] : Global.A[Event Player.A]);
	}
}

rule("Landing on Checkpoint (In some circumstances turn off?)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		(Distance Between(Event Player, Count Of(Global.A[Event Player.A]) != 0 ? Global.A[Event Player.A][1] : Global.A[Event Player.A])
			> 1.400 || False) == True;
		(Is On Ground(Event Player) == True || False) == True;
		Event Player.A < Count Of(Global.A) - 1;
		Count Of(Global.A) >= 2;
		Event Player.C != 1;
		Event Player.F != 1;
		"做特定关卡开启落地死亡再打开"
		disabled (Event Player.A == -1 || Event Player.A == -1 || Event Player.A == -1 || False) == True;
	}

	actions
	{
		If(Event Player.E < 1);
			Set Ability 1 Enabled(Event Player, False);
			Set Ultimate Ability Enabled(Event Player, False);
		End;
		Apply Impulse(Event Player, Down, Speed Of(Event Player), To Player, Cancel Contrary Motion);
		Set Status(Event Player, Null, Rooted, 0.100);
		If(Global.kz_xs == True);
			Event Player.L = 0;
			Stop Chasing Player Variable(Event Player, L);
			Event Player.A = Event Player.E > 0 ? Event Player.A : 0;
		End;
		Teleport(Event Player, Count Of(Global.A[Event Player.A]) != 0 ? Global.A[Event Player.A][1] : Global.A[Event Player.A]);
		If(Global.deathjump == True);
			Disallow Button(Event Player, Button(Jump));
			Wait(0.100, Ignore Condition);
			Allow Button(Event Player, Button(Jump));
		End;
		If(Event Player.A == 0);
			Event Player.D = 0;
		End;
		If(Is Using Ultimate(Event Player) == True);
			Kill(Event Player, Null);
		End;
	}
}

rule("Player Effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Has Status(Event Player, Phased Out) == False;
	}

	actions
	{
		Set Status(Event Player, Null, Phased Out, 9999);
		Set Status(Event Player, Null, Invincible, 9999);
	}
}

rule("Combo | Reset the run | RESTART")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Ability 2)) == True;
	}

	actions
	{
		If(Array Contains(Global.save, Custom String("{0}", Event Player)) == True);
			Modify Global Variable(save, Remove From Array By Index, Index Of Array Value(Global.save, Custom String("{0}", Event Player))
				+ 1);
			Modify Global Variable(save, Remove From Array By Index, Index Of Array Value(Global.save, Custom String("{0}", Event Player))
				+ 1);
			Modify Global Variable(save, Remove From Array By Index, Index Of Array Value(Global.save, Custom String("{0}", Event Player))
				+ 1);
			Modify Global Variable(save, Remove From Array By Index, Index Of Array Value(Global.save, Custom String("{0}", Event Player))
				+ 1);
			Modify Global Variable(save, Remove From Array By Index, Index Of Array Value(Global.save, Custom String("{0}", Event Player))
				+ 1);
			Modify Global Variable(save, Remove From Array By Index, Index Of Array Value(Global.save, Custom String("{0}", Event Player))
				+ 1);
			Modify Global Variable(save, Remove From Array By Value, Custom String("{0}", Event Player));
		End;
		Modify Global Variable At Index(P, Event Player.A, Remove From Array By Value, Event Player);
		If(Event Player.A >= Count Of(Global.A) - 1);
			Call Subroutine(Sub0);
			"这条动作为“消除玩家通关成绩显示”"
			Destroy HUD Text(Event Player.B[7]);
			"效果B5.B6代表的是光环通关特效，需保持和规则“通关特效”同步开启/关闭"
			disabled Destroy Effect(Event Player.B[5]);
			disabled Destroy Effect(Event Player.B[6]);
		End;
		Call Subroutine(Sub1);
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 100);
		Modify Global Variable(F, Remove From Array By Value, Event Player);
		Modify Global Variable(G, Remove From Array By Value, Event Player);
	}
}

rule("Combo | Spectate | Interact")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.E < 1;
	}

	actions
	{
		Wait(1, Abort When False);
		Small Message(Event Player, Custom String("Hold Interact again to turn off spectate mode"));
		If(Is Alive(Event Player) == True);
			If(Event Player.A < Count Of(Global.A) - 1);
				Chase Player Variable At Rate(Event Player, ztjs, Absolute Value(999999), 1, Destination and Rate);
				Global.save[Index Of Array Value(Global.save, Custom String("{0}", Event Player)) + 2] = Event Player.D;
				Global.save[Index Of Array Value(Global.save, Custom String("{0}", Event Player)) + 4] = Total Time Elapsed;
				Global.save[Index Of Array Value(Global.save, Custom String("{0}", Event Player)) + 6] = 1;
			End;
			Set Respawn Max Time(Event Player, 9999);
			Event Player.F = 1;
			Stop Chasing Player Variable(Event Player, D);
			Wait(0.200, Ignore Condition);
			Kill(Event Player, Null);
			Teleport(Event Player, Count Of(Global.A[Event Player.A]) != 0 ? Global.A[Event Player.A][1] : Global.A[Event Player.A]);
		Else;
			Skip If(Event Player.E >= 1, 2);
			Respawn(Event Player);
			Event Player.F = 0;
			Teleport(Event Player, Count Of(Global.A[Event Player.A]) != 0 ? Global.A[Event Player.A][1] : Global.A[Event Player.A]);
			Skip If(Event Player.A >= Count Of(Global.A) - 1, 3);
			Set Ultimate Ability Enabled(Event Player, False);
			Set Ability 1 Enabled(Event Player, False);
			Chase Player Variable At Rate(Event Player, D, 10000, 1, Destination and Rate);
			Set Respawn Max Time(Event Player, 0);
			Event Player.C = 0;
			If(Event Player.A < Count Of(Global.A) - 1);
				Stop Chasing Player Variable(Event Player, ztjs);
				Global.save[Index Of Array Value(Global.save, Custom String("{0}", Event Player)) + 5] = Event Player.ztjs;
				Event Player.ztjs = 0;
				Global.save[Index Of Array Value(Global.save, Custom String("{0}", Event Player)) + 6] = 0;
			End;
		End;
		Skip If(Global.kz_xs == False, 1);
		Event Player.A = 0;
	}
}

rule("Initialization | Double jump | Bhop")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is On Ground(Event Player) == True;
		"变量A后的数字“-1”为关卡数，具体操作参考“给刀”。此条规则开启效果为“特定关卡开启三段”，关闭则为“所有关卡封禁三段”"
		disabled (Event Player.A != -1 || Event Player.A != -1 || False) == True;
		"注释一定要看！此条条件开启的效果为“通关后自动开启三段”，关闭则通关后仍封禁三段"
		disabled Event Player.A < Count Of(Global.A) - 1;
	}

	actions
	{
		Event Player.TY = 0;
		Event Player.J = 2;
		Wait(0, Ignore Condition);
		Loop If((Event Player.TY != 0 || Event Player.J != 2) && Is On Ground(Event Player) == True);
		Event Player.O = 1;
	}
}

rule("二段跳，小跳初始化")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is On Ground(Event Player) == True;
		"变量A后的数字“-1”为关卡数，具体操作参考“给刀”。此条规则开启效果为“特定关卡开启三段”，关闭则为“所有关卡封禁三段”"
		disabled (Event Player.A != -1 || Event Player.A != -1 || False) == True;
		"注释一定要看！此条条件开启的效果为“通关后自动开启三段”，关闭则通关后仍封禁三段"
		disabled Event Player.A < Count Of(Global.A) - 1;
	}

	actions
	{
		Event Player.TY = 0;
		Event Player.J = 2;
		Event Player.climbNum = 0;
		Wait(0, Ignore Condition);
		Loop If((Event Player.TY != 0 || Event Player.J != 2) && Is On Ground(Event Player) == True);
		Event Player.O = 1;
	}
}

rule("Checking | Jump")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Jump)) == True;
		Event Player.TY != 2;
		"变量A后的数字“-1”为关卡数，具体操作参考“给刀”。此条规则开启效果为“特定关卡开启三段”，关闭则为“所有关卡封禁三段"
		disabled (Event Player.A != -1 || Event Player.A != -1 || False) == True;
		"注释一定要看！此条条件开启的效果为“通关后自动开启三段”，关闭则通关后仍封禁三"
		disabled Event Player.A < Count Of(Global.A) - 1;
	}

	actions
	{
		Event Player.TY += 1;
	}
}

rule("Checking | Bhop in the air")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.TY == 0;
		Is In Air(Event Player) == True;
		Is Button Held(Event Player, Button(Jump)) == False;
	}

	actions
	{
		Event Player.O = 0;
	}
}

rule("Checking | In the air")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Event Player.TY == 0;
		Is In Air(Event Player) == True;
		"变量A后的数字“-1”为关卡数，具体操作参考“给刀”。此条规则开启效果为“特定关卡开启三段”，关闭则为“所有关卡封禁三段"
		disabled (Event Player.A != -1 || Event Player.A != -1 || False) == True;
		"注释一定要看！此条条件开启的效果为“通关后自动开启三段”，关闭则通关后仍封禁三"
		disabled Event Player.A < Count Of(Global.A) - 1;
	}

	actions
	{
		Event Player.TY = 1;
	}
}

rule("Checking | Triple jump")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.TY == 1;
	}

	actions
	{
		Wait(0.100, Abort When False);
		Event Player.TY = 2;
	}
}

rule("Checking | Player on the wall")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		"此条规则同时与爬墙判定挂钩，请勿关闭/删除"
		Is On Wall(Event Player) == True;
		Is Button Held(Event Player, Button(Jump)) == True;
	}

	actions
	{
		Event Player.TY = 2;
		Event Player.J = 1;
	}
}

rule("Combo | Invincible/Normal mode")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Button Held(Event Player, Button(Reload)) == True;
		Is Using Ability 1(Event Player) == False;
		Event Player.A < Count Of(Global.A) - 1;
		Is Alive(Event Player) == True;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Start Forcing Player Position(Event Player, Count Of(Global.A[Event Player.A])
			!= 0 ? Global.A[Event Player.A][1] : Global.A[Event Player.A], True);
		If(Event Player.C == 0);
			Chase Player Variable At Rate(Event Player, ztjs, Absolute Value(999999), 1, Destination and Rate);
			Global.save[Index Of Array Value(Global.save, Custom String("{0}", Event Player)) + 2] = Event Player.D;
			Global.save[Index Of Array Value(Global.save, Custom String("{0}", Event Player)) + 4] = Total Time Elapsed;
			Global.save[Index Of Array Value(Global.save, Custom String("{0}", Event Player)) + 6] = 1;
			Skip If(Global.kz_xs == False, 2);
			Small Message(Event Player, Custom String("Press ctrl+LMB/RMB to jump next/prev"));
			Stop Chasing Player Variable(Event Player, L);
			Stop Chasing Player Variable(Event Player, D);
			Big Message(Event Player, Custom String("Invincible mode"));
			Stop Forcing Player Position(Event Player);
			Set Ultimate Ability Enabled(Event Player, True);
			Set Ultimate Charge(Event Player, 100);
			Set Ability 1 Enabled(Event Player, True);
			Wait(0.200, Ignore Condition);
			Event Player.C = 1;
		Else;
			Skip If(Event Player.E >= 1, 2);
			Set Ultimate Ability Enabled(Event Player, False);
			Set Ability 1 Enabled(Event Player, False);
			Skip If(Global.kz_xs == False, 1);
			Event Player.A = 0;
			Teleport(Event Player, Count Of(Global.A[Event Player.A]) != 0 ? Global.A[Event Player.A][1] : Global.A[Event Player.A]);
			Wait(0.100, Ignore Condition);
			Event Player.C = 0;
			Big Message(Event Player, Custom String("Normal mode"));
			Chase Player Variable At Rate(Event Player, D, Absolute Value(9999999.000), 1, Destination and Rate);
			Stop Forcing Player Position(Event Player);
			Stop Chasing Player Variable(Event Player, ztjs);
			Global.save[Index Of Array Value(Global.save, Custom String("{0}", Event Player)) + 5] = Event Player.ztjs;
			Event Player.ztjs = 0;
			Global.save[Index Of Array Value(Global.save, Custom String("{0}", Event Player)) + 6] = 0;
		End;
	}
}

rule("Ultimate charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Ultimate Charge Percent(Event Player) < 100;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
	}
}

rule("Checking | Using Emote")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating Any Emote(Event Player) == True;
	}

	actions
	{
		Event Player.O = 0;
	}
}

rule("Checking | Bhop")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.O == 0;
		Is Jumping(Event Player) == True;
	}

	actions
	{
		Event Player.O = 1;
		Small Message(Event Player, Custom String("Bhop"));
	}
}

rule("Player left the game")
{
	event
	{
		Player Left Match;
		All;
		All;
	}

	actions
	{
		Modify Global Variable(Q, Remove From Array By Value, Event Player);
		If(Global.save[Index Of Array Value(Global.save, Event Player) - 2] == 0);
			Modify Global Variable(save, Remove From Array By Index, Index Of Array Value(Global.save, Event Player) + 1);
			Modify Global Variable(save, Remove From Array By Index, Index Of Array Value(Global.save, Event Player) + 1);
			Modify Global Variable(save, Remove From Array By Index, Index Of Array Value(Global.save, Event Player) + 1);
			Modify Global Variable(save, Remove From Array By Index, Index Of Array Value(Global.save, Event Player) - 1);
			Modify Global Variable(save, Remove From Array By Index, Index Of Array Value(Global.save, Event Player) - 1);
			Modify Global Variable(save, Remove From Array By Index, Index Of Array Value(Global.save, Event Player) - 1);
			Modify Global Variable(save, Remove From Array By Value, Event Player);
		Else;
			Skip If(Global.save[Index Of Array Value(Global.save, Event Player) - 2] >= Count Of(Global.A) - 1, 2);
			Skip If(Global.save[Index Of Array Value(Global.save, Event Player) + 3] == 1, 1);
			Global.save[Index Of Array Value(Global.save, Event Player) - 1] = Total Time Elapsed - Global.save[Index Of Array Value(
				Global.save, Event Player) + 1] - Global.save[Index Of Array Value(Global.save, Event Player)
				+ 2] + Global.save[Index Of Array Value(Global.save, Event Player) - 1];
			Global.save[Index Of Array Value(Global.save, Event Player) + 2] = 0;
			Global.save[Index Of Array Value(Global.save, Event Player) + 3] = 0;
		End;
	}
}

rule("Create Bhop Climb HUD Text")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Create HUD Text(Event Player, Custom String("Bhop"), Null, Null, Left, 1, Event Player.O == 0 ? Color(Green) : Event Player.CH,
			Color(White), Color(White), Color, Default Visibility);
		disabled Create HUD Text(Event Player, Custom String("Climb"), Null, Null, Left, 2, Event Player.CG, Color(White), Color(White), Color,
			Default Visibility);
	}
}

rule("爬墙未用HUD___Counter")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.J == 2;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.paqiang);
		Create HUD Text(Event Player, Custom String("Climb{0}", Event Player.climbNum > 0 ? Custom String("({0})", Event Player.climbNum)
			: Custom String("")), Null, Null, Left, 2, Color(Green), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Event Player.paqiang = Last Text ID;
	}
}

rule("爬墙已用HUD___Counter")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.J == 1;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.paqiang);
		Create HUD Text(Event Player, Custom String("Climb"), Null, Null, Left, 2, Color(Red), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Event Player.paqiang = Last Text ID;
		If(Event Player.HUB_DOTS_INDEX == 2);
			Small Message(Event Player, Custom String("Wallclimb "));
		End;
	}
}

rule("爬墙计数")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is On Wall(Event Player) == True;
		Is Button Held(Event Player, Button(Jump)) == False;
		Event Player.J == 2;
		Event Player.C == 0;
	}

	actions
	{
		Event Player.climbNum += 1;
	}
}

rule("Bhop Green")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is On Ground(Event Player) == True;
		Is Button Held(Event Player, Button(Jump)) == False;
	}

	actions
	{
		Event Player.CH = Color(Green);
	}
}

rule("Bhop Red")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Jumping(Event Player) == True;
	}

	actions
	{
		Event Player.CH = Color(Red);
	}
}

rule("Checking | Double bhop | thank for Githuboy#5249")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is On Wall(Event Player) == False;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Jump)) == False;
		Is On Ground(Event Player) == False;
		Is In Air(Event Player) == True;
		Is Jumping(Event Player) == False;
		Is Crouching(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("Success"));
		Event Player.O = 0;
		If(Global.kaxiaotiao == True);
			Kill(Event Player, Null);
			Small Message(Event Player, String("{0} {1}", Hero Icon String(Hero(Genji)), Custom String(": Double Bhop is disabled")));
		End;
	}
}

rule("Combo | Quick Reset")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Reload)) == True;
		Event Player.E < 1;
	}

	actions
	{
		Abort If(Is Button Held(Event Player, Button(Melee)) == True);
		If(Event Player.quick_restart == True);
			Start Forcing Player Position(Event Player, Count Of(Global.A[Event Player.A])
				!= 0 ? Global.A[Event Player.A][1] : Global.A[Event Player.A], True);
			Skip If(Event Player.E >= 1 || Event Player.C == 1, 2);
			Set Ultimate Ability Enabled(Event Player, False);
			Set Ability 1 Enabled(Event Player, False);
			Teleport(Event Player, Count Of(Global.A[Event Player.A]) != 0 ? Global.A[Event Player.A][1] : Global.A[Event Player.A]);
			Wait(0.100, Ignore Condition);
			Stop Forcing Player Position(Event Player);
		End;
		Wait(1, Abort When False);
		If(Event Player.quick_restart == False);
			Event Player.quick_restart = True;
			Big Message(Event Player, Custom String("Quick reset is enabled"));
			Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 100);
		Else If(Event Player.quick_restart == True);
			Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 100);
			Event Player.quick_restart = False;
			Big Message(Event Player, Custom String("Quick reset is disabled"));
		End;
	}
}

rule("Limit Ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		"此条规则作用为：在跑图时令SHIFT只能使用一次"
		Is Using Ultimate(Event Player) == True;
		Event Player.A < Count Of(Global.A) - 1;
		Event Player.E < 1;
		Event Player.C == 0;
	}

	actions
	{
		Set Ultimate Ability Enabled(Event Player, False);
	}
}

rule("Lmit Dash")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		"此条规则作用为：在跑图时令SHIFT只能使用一次"
		Is Using Ability 1(Event Player) == True;
		Event Player.A < Count Of(Global.A) - 1;
		Event Player.E < 1;
		Event Player.C == 0;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, False);
	}
}

rule("Give Blade")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is On Ground(Event Player) == True;
		Event Player.A < Count Of(Global.A) - 1;
		Distance Between(Event Player, Count Of(Global.A[Event Player.A]) > 1 ? Last Of(Global.A[Event Player.A])
			: Global.A[Event Player.A]) <= 1.400;
		Array Contains(Global.Dao, Event Player.A) == True;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Abort If(Is Using Ultimate(Event Player) == True);
		Set Ultimate Ability Enabled(Event Player, True);
		Set Ultimate Charge(Event Player, 100);
		Small Message(Event Player, Custom String("Ultimate is ready"));
	}
}

rule("Give Dash")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is On Ground(Event Player) == True;
		Event Player.A < Count Of(Global.A) - 1;
		disabled Distance Between(Event Player, Global.A[Event Player.A]) <= 1.400;
		Distance Between(Event Player, Count Of(Global.A[Event Player.A]) > 1 ? Last Of(Global.A[Event Player.A])
			: Global.A[Event Player.A]) <= 1.400;
		Array Contains(Global.SHIFT, Event Player.A) == True;
		Is Using Ability 1(Event Player) == False;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, True);
		Small Message(Event Player, Custom String("Dash is ready"));
	}
}

rule("-------------------------------------------Addons-------------------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("Add Blade to Checkpoint")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"Change \"-1\" to certain Checkpoints' number. For example if you want to add Blade to Checkpoint 2 and 6 change one of \"-1\" to 2 and other \"-1\" to 6"
		Global.Dao = Array(Empty Array, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1);
	}
}

disabled rule("Add Dash to Checkpoint")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"Change \"-1\" to certain Checkpoints' number. For example if you want to add Dash to Checkpoint 7 and 1 change one of \"-1\" to 7 and other \"-1\" to 1"
		Global.SHIFT = Array(Empty Array, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1);
	}
}

disabled rule("Portal 1-2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		"将矢量（0，0，0）修改为开始的传送位置"
		Distance Between(Event Player, Vector(0, 0, 0)) <= 1.400;
		"将“-1”修改为传送门关卡的关卡数"
		(Event Player.A == -1 || Event Player.A >= Count Of(Global.A) - 1) == True;
	}

	actions
	{
		"将矢量（0，0，0）修改为传送结束的位置"
		disabled Teleport(Event Player, Vector(0, 0, 0));
		"不想找坐标的，直接传送到关卡0"
		disabled Teleport(Event Player, Global.A[0]);
	}
}

disabled rule("Portal 2-3")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		"将矢量（0，0，0）修改为开始的传送位置"
		Distance Between(Event Player, Vector(0, 0, 0)) <= 1.400;
		"将“-1”修改为传送门关卡的关卡数"
		(Event Player.A == -1 || Event Player.A >= Count Of(Global.A) - 1) == True;
	}

	actions
	{
		"将矢量（0，0，0）修改为传送结束的位置"
		disabled Teleport(Event Player, Vector(0, 0, 0));
		"不想找坐标的，直接传送到关卡0"
		disabled Teleport(Event Player, Global.A[0]);
	}
}

disabled rule("Portal 3-1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		"将矢量（0，0，0）修改为开始的传送位置"
		Distance Between(Event Player, Vector(0, 0, 0)) <= 1.400;
		"将“-1”修改为传送门关卡的关卡数"
		(Event Player.A == -1 || Event Player.A >= Count Of(Global.A) - 1) == True;
	}

	actions
	{
		"将矢量（0，0，0）修改为传送结束的位置"
		disabled Teleport(Event Player, Vector(0, 0, 0));
		"不想找坐标的，直接传送到关卡0"
		disabled Teleport(Event Player, Global.A[0]);
	}
}

disabled rule("In world text for certain Checkpoints")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		disabled Create In-World Text(Sorted Array(Global.P[0], Current Array Element), Custom String("Text for checkpoint 0"), Vector(0, 0, 0),
			1.200, Clip Against Surfaces, Visible To Position and String, Color(Orange), Default Visibility);
		disabled Create In-World Text(Sorted Array(Global.P[1], Current Array Element), Custom String("Text for checkpoint 1"), Vector(0, 0, 0),
			1.200, Clip Against Surfaces, Visible To Position and String, Color(Orange), Default Visibility);
		disabled Create In-World Text(Sorted Array(Global.P[2], Current Array Element), Custom String("Text for checkpoint 2"), Vector(0, 0, 0), 3,
			Clip Against Surfaces, Visible To Position and String, Color(Orange), Default Visibility);
	}
}

disabled rule("HUD text for certain Checkpoints")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		disabled Create HUD Text(Sorted Array(Global.P[0], Current Array Element), Custom String("Text for checkpoint 0"), Null, Null, Top, -4,
			Color(Red), Color(White), Color(White), Visible To and String, Default Visibility);
		disabled Create HUD Text(Sorted Array(Global.P[1], Current Array Element), Custom String("Text for checkpoint 1"), Null, Null, Top, -4,
			Color(Red), Color(White), Color(White), Visible To and String, Default Visibility);
		disabled Create HUD Text(Sorted Array(Global.P[2], Current Array Element), Custom String("Text for checkpoint 2"), Null, Null, Top, -4,
			Color(Red), Color(White), Color(White), Visible To and String, Default Visibility);
	}
}

disabled rule("orld text")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("DVA Bomb to destroy railings - Coordinates")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.DVA = Empty Array;
		Global.dva = 0;
		"Change Vector (0, 0, 0) to position where DVA will detonate"
		disabled Modify Global Variable(DVA, Append To Array, Vector(-78.678, 15.092, -97.781));
		disabled Modify Global Variable(DVA, Append To Array, Vector(-68.359, 16.199, -89.387));
		disabled Modify Global Variable(DVA, Append To Array, Vector(-79.100, 16.199, -88.100));
	}
}

disabled rule("Summon DVA")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.dva == 0;
		Count Of(All Players(Team 2)) < 6;
	}

	actions
	{
		Create Dummy Bot(Hero(D.Va), Team 2, 5, Global.DVA[Global.dva], Up);
		Global.dva += 1;
		Start Holding Button(Players On Hero(Hero(D.Va), All Teams), Button(Ultimate));
		Wait(6.500, Ignore Condition);
		Loop If(Global.dva < Count Of(Global.DVA));
		Stop Holding Button(Players On Hero(Hero(D.Va), All Teams), Button(Ultimate));
		Destroy Dummy Bot(Team 2, 5);
	}
}

disabled rule("Portal Effect - Text")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		"Change Vector (0, 0, 0) to starting position of Portal 1-2"
		Create In-World Text(Event Player, Custom String("{{0}}", Event Player.H, Custom String("Send to next target"), Custom String(
			"to next map")), Vector(276.288, -17.222, -74.522), 1.500, Clip Against Surfaces, Visible To Position and String, Color(
			Yellow), Default Visibility);
		"Change Vector (1, 1, 1) to starting position of Portal 2-3"
		Create In-World Text(Event Player, Custom String("{{0}}", Event Player.H, Custom String("Send to next target"), Custom String(
			"to next map")), Vector(1, 1, 1), 1.500, Clip Against Surfaces, Visible To Position and String, Color(Yellow),
			Default Visibility);
	}
}

disabled rule("Portal Effects")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"Effects of Portal 1-2"
		Create Effect(Global.F, Ring, Color(Lime Green), Vector(0, 0, 0), 1, Visible To Position and Radius);
		"Effects of Portal 1-2"
		Create Effect(Global.F, Light Shaft, Color(Red), Vector(276.288, -17.222, -74.522), 1, Visible To Position and Radius);
		"Effects of Portal 2-3"
		Create Effect(Global.G, Ring, Color(Lime Green), Vector(1, 1, 1), 1, Visible To Position and Radius);
		"Effects of Portal 2-3"
		Create Effect(Global.G, Light Shaft, Color(Red), Vector(1, 1, 1), 1, Visible To Position and Radius);
		"Effects of Portal 3-1"
		Create Effect(Global.F, Ring, Color(Lime Green), Vector(2, 2, 2), 1, Visible To Position and Radius);
		"Effects of Portal 3-1"
		Create Effect(Global.F, Light Shaft, Color(Red), Vector(2, 2, 2), 1, Visible To Position and Radius);
		"Change Vector  (0, 0, 0) to starting position of Portal 3-1"
		Create In-World Text(Global.F, Custom String("to next map"), Vector(0, 0, 0), 1.500, Clip Against Surfaces,
			Visible To Position and String, Color(Yellow), Default Visibility);
	}
}

disabled rule("开启传送门视野—————————— 特定关卡时开启 ————————————")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		"将“-1”分别改为两个传送门所在关卡的关卡数"
		(Event Player.A == -1 || Event Player.A == -1 || Event Player.A >= Count Of(Global.A) - 1) == True;
	}

	actions
	{
		Event Player.H = 1;
		"将“-1”修改为第一个传送门所在的关卡数"
		If(Event Player.A == -1);
			Modify Global Variable(F, Append To Array, Event Player);
		"将“-2”修改为第二个传送门所在的关卡数"
		Else If(Event Player.A == -2);
			Modify Global Variable(G, Append To Array, Event Player);
		"无需更改"
		Else If(Event Player.A >= Count Of(Global.A) - 1);
			Modify Global Variable(G, Append To Array, Event Player);
			Modify Global Variable(F, Append To Array, Event Player);
			Event Player.H = 2;
		End;
	}
}

disabled rule("关闭传送门视野—————————— 特定关卡时关闭 ————————————")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		"将“-2”分别修改为两个传送门传送过去后的关卡数"
		(Event Player.A == -2 || Event Player.A == -2 || False) == True;
	}

	actions
	{
		Event Player.H = 0;
		"将此处的“-2”修改为第一个传送门传送过去之后的关卡数"
		If(Event Player.A == -2);
			Modify Global Variable(F, Remove From Array By Value, Event Player);
		"将此处的“-2”修改为第二个传送门传送过去之后的关卡数"
		Else If(Event Player.A == -2);
			Modify Global Variable(G, Remove From Array By Value, Event Player);
		End;
	}
}

rule("Text <------------------------------------------------- put code and author here!")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("For more maps and records join:"), Left, -14, Color(White),
			Color(White), Color(Purple), Visible To, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("dsc.gg/genjiparkour"), Left, -13, Color(White), Color(White),
			Color(Purple), Visible To, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String(""), Null, Custom String("{0}\r\n{1}", Custom String(
			"MADE BY: Write your nickname here"), Custom String("CODE: write maps code here")), Left, -15, Color(White), Color(Sky Blue),
			Color(Sky Blue), Visible To and String, Default Visibility);
	}
}

rule("Friend Title - Displaying your message (on you)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		"In the field custom string your nickname"
		If(Custom String("your nickname <-------") == Custom String("{0}", Event Player));
			Big Message(All Players(All Teams), Custom String("Message to the whole room"));
			Create In-World Text(All Players(All Teams), Custom String("Title <---------------The inscription that will be displayed on you"),
				Event Player, 1.500, Clip Against Surfaces, Visible To Position and String, Color(Orange), Default Visibility);
		End;
		"空白处填写您好友的名字"
		If(Custom String("your nickname <-------") == Custom String("{0}", Event Player));
			Big Message(All Players(All Teams), Custom String("Message to the whole room"));
			Create In-World Text(All Players(All Teams), Custom String("Title <---------------The inscription that will be displayed on you"),
				Event Player, 1.500, Clip Against Surfaces, Visible To Position and String, Color(Orange), Default Visibility);
		End;
	}
}

rule("-------------------------------Workshop settings-------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Ban | Triple Jump")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Vertical Speed Of(Event Player) >= 5.800;
		Event Player.TY == 1;
		Is Using Ability 1(Event Player) == False;
		Workshop Setting Toggle(Custom String("Ban Switch"), Custom String("Ban Triple Jump"), False, 0) == True;
	}

	actions
	{
		Abort If(Is On Wall(Event Player) == True);
		Apply Impulse(Event Player, Down, Speed Of(Event Player), To Player, Cancel Contrary Motion);
	}
}

rule("Ban | Multiclimb")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is On Wall(Event Player) == True;
		Is Button Held(Event Player, Button(Jump)) == False;
		Event Player.J == 2;
		Workshop Setting Toggle(Custom String("Ban Switch"), Custom String("Ban Multiclimb"), False, 1) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Down, Speed Of(Event Player), To Player, Cancel Contrary Motion);
		Small Message(Event Player, String("{0} {1}", Hero Icon String(Hero(Genji)), Custom String(": Multiclimb is Disabled")));
	}
}

rule("Ban | Double Bhop")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Workshop Setting Toggle(Custom String("Ban Switch"), Custom String("Ban Double Bhop"), False, 2) == True;
	}

	actions
	{
		Global.kaxiaotiao = True;
	}
}

rule("Ban | Emote")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating Any Emote(Event Player) == True;
		Event Player.A < Count Of(Global.A) - 1;
		Workshop Setting Toggle(Custom String("Ban Switch"), Custom String("Ban Emote"), False, 3) == True;
	}

	actions
	{
		Kill(Event Player, Null);
		Small Message(Event Player, String("{0} {1}", Hero Icon String(Hero(Genji)), Custom String(": Emote jumping is disabled")));
	}
}

rule("Ban | Bhop from Reset")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Workshop Setting Toggle(Custom String("Ban Switch"), Custom String("Ban bhop from reset"), False, 4) == True;
	}

	actions
	{
		Global.deathjump = True;
	}
}

rule("Extended function | Strengthen stall (家里有妖怪#5202 | Easier to stall | Jump farther)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		(Vertical Speed Of(Event Player) >= -0.200 && Vertical Speed Of(Event Player) <= 0.050) == True;
		Horizontal Speed Of(Event Player) <= 1.300;
		Is In Air(Event Player) == True;
		Is On Wall(Event Player) == False;
		Is On Ground(Event Player) == False;
		Workshop Setting Toggle(Custom String("Extended function"), Custom String("Strengthen stall"), False, 0) == True;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Start Forcing Player Position(Event Player, Position Of(Event Player), False);
		Wait Until(Is Moving(Event Player) == False, 10);
		Stop Forcing Player Position(Event Player);
		Set Move Speed(Event Player, 0);
		Set Gravity(Event Player, 0);
		Wait(3, Ignore Condition);
		Set Gravity(Event Player, 100);
		Set Move Speed(Event Player, 100);
		Apply Impulse(Event Player, Up, 10, To World, Cancel Contrary Motion);
		Loop If Condition Is True;
	}
}

rule("Extended function | Climb the wall to refresh double jump(喵喵酱#51379 | Touch and Multi will not trigger)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is On Wall(Event Player) == True;
		Workshop Setting Toggle(Custom String("Extended function"), Custom String("Climb the wall to refresh double jump"), False, 1)
			== True;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Wait Until(Is On Wall(Event Player) == False, 1);
		Set Status(Event Player, Null, Hacked, 0.100);
		Wait(0.100, Ignore Condition);
		Clear Status(Event Player, Hacked);
	}
}

rule("Extended function | Save climb into the checkpoint(TITANXPASCAL#5554 *Remember to create text to prompt players)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.A[Event Player.A + 1]) <= 2;
		Workshop Setting Toggle(Custom String("Extended function"), Custom String("Save climb into the checkpoint"), False, 2) == True;
		"Change \"-1\" to certain Checkpoints' number"
		Array Contains(Array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), Event Player.A) == True;
		"If all checkpoints need this function, enable this rule and disable Rule: \"Array Contains\" "
		disabled Event Player.A < Count Of(Global.A) - 1;
	}

	actions
	{
		If(Event Player.J == 1);
			Kill(Event Player, Null);
			Small Message(Event Player, Custom String("Fail to meet clear condition: Save climb"));
		End;
	}
}

rule("Extended function | Save Bhop into the checkpoint(TITANXPASCAL#5554 *Remember to create text to prompt players)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.A[Event Player.A + 1]) <= 2;
		Workshop Setting Toggle(Custom String("Extended function"), Custom String("Save Bhop into the checkpoint"), False, 3) == True;
		"Change \"-1\" to certain Checkpoints' number"
		Array Contains(Array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), Event Player.A) == True;
		"If all checkpoints need this function, enable this rule and disable Rule: \"Array Contains\" "
		disabled Event Player.A < Count Of(Global.A) - 1;
	}

	actions
	{
		If(Event Player.O == 1);
			Kill(Event Player, Null);
			Small Message(Event Player, Custom String("Fail to meet clear condition: Save bhop"));
		End;
	}
}

rule("rule 91")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.A[Event Player.E > 0 ? Event Player.A : 0]) > 1.400;
		Global.kz_xs == True;
		(Event Player.E > 0 ? 0 : Event Player.C) != 1;
		(Event Player.E > 0 ? 0 : Event Player.A) == 0;
		disabled Event Player.A == 0;
		disabled Event Player.C != 1;
	}

	actions
	{
		Event Player.L = 0;
		Chase Player Variable At Rate(Event Player, L, 10, 1, Destination and Rate);
		Event Player.D = 0;
	}
}

rule("rule 92")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.kz_xs == True;
		Event Player.L >= 5;
		Event Player.A < Count Of(Global.A) - 1;
	}

	actions
	{
		Event Player.A = Event Player.E > 0 ? Event Player.A : 0;
		Skip If(Event Player.C == 1, 2);
		Skip If(Event Player.E > 0 && Is On Ground(Event Player), 2);
		Teleport(Event Player, Global.A[Event Player.E < 1 ? 0 : Event Player.A]);
		Small Message(Event Player, Custom String("Time out!"));
		Stop Chasing Player Variable(Event Player, L);
	}
}

rule("rule 93")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.A[0]) < 1;
		Event Player.A == 0;
		Global.kz_xs == True;
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, L);
		Event Player.L = 0;
		Event Player.D = 0;
	}
}

rule("rule 94")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.C == 1;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Global.kz_xs == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Event Player.A += Event Player.A < Count Of(Global.A) - 2 ? 1 : 0;
		Teleport(Event Player, Global.A[Event Player.A]);
	}
}

rule("rule 95")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.C == 1;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Global.kz_xs == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		Event Player.A -= Event Player.A > 0 ? 1 : 0;
		Teleport(Event Player, Global.A[Event Player.A]);
	}
}